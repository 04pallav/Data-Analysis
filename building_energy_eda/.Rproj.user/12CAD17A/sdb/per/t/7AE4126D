{
    "collab_server" : "",
    "contents" : "# Animation Fun\n# Try to see what can be done with animation\n\n\n#  Need both of these libraries as well as ImageMagick installed on computer.\n#  Make sure ImageMagick is on your computer's path or set the path directly\n#  in the call to gganimate\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(gganimate)\n\n\n# Read in a local file\nread_data <- function(filename) {\n  df <- as.data.frame(suppressMessages(read_csv(filename)))\n  df$day_of_week <- as.factor(df$day_of_week)\n  df$week_day_end <- as.factor(df$week_day_end)\n  df$sun_rise_set <- as.factor(df$sun_rise_set)\n  return(df)\n}\n\n# Example dataframe\nenergy_df <- read_data('../data/f-SRP_weather.csv')\n\n# Create day, month, year, season, and year-season columns \n# Seasons are defined based on meteorological seasons\n# Create a day for grouping\nenergy_df$day <-lubridate::ymd(as.Date(energy_df$timestamp, tz = 'EST'))\nenergy_df$month <- lubridate::month(as.Date(energy_df$timestamp, tz = 'EST'))\nenergy_df$year <- lubridate::year(as.Date(energy_df$timestamp, tz = 'EST'))\n\n# December of the preceding year is assocaited with winter of the next year \nenergy_df[which(energy_df$month == 12), ]$timestamp <- energy_df[which(energy_df$month == 12), ]$timestamp + years(1)\n\nenergy_df[which(energy_df$month == 12), ]$year <- energy_df[which(energy_df$month == 12), ]$year + 1\n\n\n\nenergy_df$season <- ifelse(energy_df$month %in% c(12, 1, 2), 'winter', \n                           ifelse(energy_df$month %in% c(3, 4, 5), 'spring',\n                                  ifelse(energy_df$month %in% c(6, 7, 8), 'summer',\n                                         'fall')))\n\nenergy_df$season_color <- ifelse(energy_df$season == 'winter', 'blue', \n                                 ifelse(energy_df$season == 'spring', 'darkgreen',\n                                        ifelse(energy_df$season == 'fall', 'orange',\n                                               'firebrick')))\n\n\nenergy_df$ys <- paste(energy_df$year, energy_df$season, sep = '-')\n\nenergy_df2 <- dplyr::select(energy_df, timestamp, forecast, temp, ghi, num_time, day, month,\n                            year, season, ys, day_of_week, season_color)\n\nenergy_df2$day_ys <- paste(energy_df2$day_of_week, energy_df2$ys, sep = '-')\n\nenergy_df2$day_of_week <- factor(energy_df2$day_of_week, levels = c('Mon', 'Tue',\n                                                                       'Wed', 'Thu',\n                                                                       'Fri', 'Sat', \n                                                                       'Sun'))\nyear_num <- 2016\n\nplot_df <- dplyr::filter(energy_df2, lubridate::year(timestamp) == year_num)\nplot_df$week <- lubridate::week(plot_df$timestamp)\nplot_df <- arrange(plot_df, timestamp)\n\np <- ggplot(plot_df, aes(x = num_time, y = forecast, frame = day_of_week)) + \n  stat_summary(fun.y = mean, geom = 'line', aes(col = season_color), lwd = 1.2) + \n  ggtitle(sprintf('%s Consumption for: ', year_num)) + xlab('Time of Day (hrs)') + \n  ylab('Energy (kWh)') + coord_cartesian(xlim = c(0, 24)) + \n  scale_x_continuous(breaks = seq(0, 24, 4)) + theme_classic(12) + \n  scale_color_identity(labels = unique(plot_df$season),\n                       guide = 'legend') + labs(color = 'season') + \n  theme(axis.text = element_text(color = 'black'), \n        plot.title = element_text(hjust = 0.5)) \n\ngganimate(p, sprintf('%s_snapshot.gif', year_num), interval = 0.5, title_frame = TRUE, \n          ani.width = 650, ani.height = 650)\n\np2 <- ggplot(dplyr::filter(plot_df, day_of_week == 'Mon'), \n             aes(x = num_time, y = forecast, frame = num_time, cumulative = TRUE)) + \n  geom_boxplot(outlier.colour = NA, aes(group = num_time, fill = season_color)) + \n  scale_fill_identity(labels = unique(plot_df$season)) + labs(fill = 'season') + \n  ggtitle('Monday Daily Consumption') + ylab('Energy (kWh)') + \n    facet_wrap(~season, ncol = 1) + \n  xlab('Time of Day (hrs)') + theme_stata(12) + \n    scale_x_continuous(breaks = seq(0, 24, 4),limits = c(0, 24)) + \n  theme(axis.text = element_text(color = 'black'), \n        plot.title = element_text(hjust = 0.5))\n\ngganimate(p2, sprintf('%s_daily.gif', year_num), interval = 0.25, title_frame = FALSE, \n          ani.width = 1200, ani.height = 800)\n\np3 <- ggplot(plot_df, aes(x = timestamp, y = forecast, frame = week, \n             col = season_color, cumulative = TRUE)) + geom_line() + scale_color_identity() + \n  xlab('') + ylab('Energy (kWh)') + ggtitle(sprintf('%s One Week at a Time', year_num)) + \n  theme_classic(12) + \n  theme(axis.text = element_text(color = 'black'), \n        plot.title = element_text(hjust = 0.5)) + scale_x_datetime()\n\ngganimate(p3, sprintf('%s_full.gif', year_num), interval = 0.35, title_frame = FALSE,\n          ani.width = 1000, ani.height = 500)\n  \nenergy_df2$week <- lubridate::week(energy_df2$timestamp)\n\nsummer_df <- dplyr::filter(energy_df2, season == 'summer') %>% \n  group_by(num_time, day_of_week) %>%\n  summarize(temp = mean(temp), ghi = mean(ghi), forecast = mean(forecast)) %>%\n  arrange(day_of_week, num_time)\n\nweek <- seq.POSIXt(as.POSIXct(\"2016-06-01 00:00:00\"), as.POSIXct(\"2016-06-07 23:45:00\"), by = 60*15)\nsummer_df$week <- as.numeric(week)\nbreaks <- seq(range(summer_df$week)[1] + (12 * 3600), \n              range(summer_df$week)[2] - (12 * 3600), length.out = 7)\n\nrepeats <- 40\nframes <- rep(1:repeats, each = round(nrow(summer_df) / repeats))\nsummer_df$frame <- frames[1:nrow(summer_df)]\n\np4 <- ggplot(summer_df, aes(x = week, y = forecast, frame = frame, cumulative = TRUE)) + \n  geom_line(lwd = 1.2, color = 'midnightblue') + theme_hc(12) + \n  geom_line(aes(x = week, y = (1 / 0.7) * temp), color = 'tan2', lwd = 1.2) + \n  xlab('') + ylab('Energy (kWh)') + ggtitle(\"Energy and Temp Correlation\") + \n  scale_y_continuous(sec.axis = sec_axis((~.*0.7), name = 'Temp (C)')) + \n  theme(axis.text.y =  element_text(color = 'midnightblue'), \n        axis.text.y.right = element_text(color = 'tan2'), \n        plot.title = element_text(color = 'black', size = 16, face = 'bold',\n                                  hjust = 0.5),\n        axis.text = element_text(color = 'black', size = 12),\n        axis.title = element_text(color = 'black', size = 14, face = 'bold')) + \n  scale_x_continuous(breaks = breaks, labels = unique(summer_df$day_of_week))\n\ngganimate(p4, filename = 'energy_and_temp.gif', title_frame = FALSE, interval = 0.6,\n          ani.width = 1200, ani.height = 650)\n\n\n\n\n# # Select the relevant columns for plotting\n# temp_energy <- select(energy_df, num_time, cleaned_energy, biz_day, temp, day)\n# \n# # Convert the dataframe to long format\n# temp_energy <- gather(temp_energy, key = 'variable', value = 'value', \n#                       cleaned_energy, temp) %>%\n#   arrange(day, num_time)\n#   \n# The call to ggplot is the same as normal except aes(frame) is added. The frame \n# is the variable over which you want to iterate. In this case, I am \n# iterating over the days.\n# \n# This plot is energy and temperature. I created a secondary axis for temperature\n# but left the scale the exact same as for energy because the two\n# were very simliar with this data\np <- ggplot(temp_energy[1:1000, ], \n            aes(x = num_time, y = value, col = variable, frame = day)) + \n  geom_line() + xlab('Time of Day (hrs)') + \n  scale_y_continuous(sec.axis = sec_axis(~.*1, name = \"Temp (C)\")) + \n  labs(col = 'legend') + ylab('Energy (kWh)') + \n  scale_x_continuous(lim=c(0, 24), breaks = seq(0, 24, 4)) + \n  scale_color_manual(values = c('black', 'red')) + \n  theme(axis.text.y.right = element_text(color = 'red'),\n        axis.text.y = element_text(color = 'black'))\n\n# I had to specify the path to ImageMagick on my computer using ani.options\n# p is the plot, the second argument is the file location to save the output (\n# different output types can be used), the interval is the time in seconds between frames,\n# ani.options might have to be set to the location of ImageMagick convert\n# on your computer, title_frame sets the title to the name of each frame, saver\n# is the type of saver to use (can change for different file types)\ngganimate(p, 'energy_temp.gif', interval = 0.5,\n          title_frame = TRUE, saver = 'gif')\n",
    "created" : 1512849021094.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4015599450",
    "id" : "7AE4126D",
    "lastKnownWriteTime" : 1512526296,
    "last_content_update" : 1512526296,
    "path" : "~/DSCI 451/cross-section_building_eda/scripts/mrk-animation_exploration.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}