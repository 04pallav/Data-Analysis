y_test <- features_labels$y_test
knitr::kable(X_train[1:10], caption = 'Training Features Cols 1:10')
knitr::kable(X_train[5, 1:10], caption = 'Training Features Cols 1:10')
knitr::kable(X_train[1:5, 1:8], caption = 'Training Features Cols 1:8')
View(X_test)
knitr::kable(X_train[1:5, 1:6], caption = 'Training Features Cols 1:6')
knitr::kable(y_train[1:5, ], caption = "Training Labels")
runtimes <- as.data.frame(matrix(nrow = 12, ncol = 3))
names(runtimes) <- c('building', 'task', 'time')
runtimes$building <- sapply(filenames, function(file) {rep(unlist(strsplit(file, '-|_'))[2], 2)})
extract_name <- function(filename){
return(name <- unlist(strsplit(file, '-|_'))[2])
}
runtimes$building <- sapply(filenames, rep(extract_name, 2))
runtimes$building <- sapply(filenames, function(x) rep(extract_name(x), 2))
runtimes <- as.data.frame(matrix(nrow = 16, ncol = 3))
extract_name <- function(filename){
return(name <- unlist(strsplit(file, '-|_'))[2])
}
names(runtimes) <- c('building', 'task', 'time')
sapply(filenames, function(x) rep(extract_name(x), 2))
return(name <- unlist(strsplit(filename, '-|_'))[2])
extract_name <- function(filename){
return(name <- unlist(strsplit(filename, '-|_'))[2])
}
names(runtimes) <- c('building', 'task', 'time')
runtimes$building <- sapply(filenames, function(x) rep(extract_name(x), 2))
extract_name <- function(filename){
return(unlist(strsplit(filename, '-|_'))[2])
}
names(runtimes) <- c('building', 'task', 'time')
runtimes$building <- sapply(filenames, function(x) rep(extract_name(x), 2))
sapply(filenames, function(x) rep(extract_name(x), 2))
unlist(sapply(filenames, function(x) rep(extract_name(x), 2)))
unlist(sapply(filenames, extract_name))
sapply(filenames, extract_name)
runtimes$building <- c('APS', 'APS', 'CoServ', 'CoServ', 'Kansas', 'Kansas',
'NVE', 'NVE', 'PGE1', 'PGE1', 'SDGE', 'SDGE', 'SMUD',
'SMUD', 'SRP', 'SRP')
runtimes$task <- rep(c('train', 'predict'), 8)
runtimes$time <- c(186, 1.7, 156, 2.1, 41.1, 0.4, 108, 1.0, 37.3, 0.3, 47.6, 0.4, 162, 1.5, 102, 0.9)
# Create dataframe of training and testing times for random forest
runtimes <- as.data.frame(matrix(nrow = 16, ncol = 3))
names(runtimes) <- c('building', 'task', 'time')
runtimes$building <- c('APS', 'APS', 'CoServ', 'CoServ', 'Kansas', 'Kansas',
'NVE', 'NVE', 'PGE1', 'PGE1', 'SDGE', 'SDGE', 'SMUD',
'SMUD', 'SRP', 'SRP')
runtimes$task <- rep(c('train', 'predict'), 8)
runtimes$time <- c(186, 1.7, 156, 2.1, 41.1, 0.4, 108, 1.0, 37.3, 0.3, 47.6, 0.4, 162, 1.5, 102, 0.9)
# RMSE Comparison Plot
ggplot(filter(metrics, metric == 'rmse' & building != "CoServ" & building != "SMUD"), aes(factor(model, levels = c('rf', 'svr', 'lr')))) +
geom_bar(aes(y = value, fill = model),
color = "black", width = 0.9, position = 'dodge', stat = 'identity') +
facet_wrap(~building) + xlab('Model') +
ylab("rmse (kWh)") + theme_dark(14) +
theme(axis.text.x = element_text(size = 14, face = 'bold', color = 'black'),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 12, face = 'bold', color = 'black'),
panel.background = element_rect(fill = 'white')) +
scale_y_continuous(breaks = seq(0, 6, 1)) +
ggtitle("Model Test Set RMSE Comparison") +
scale_fill_manual(values = c("blue", "red", "green"))
# R Squared Comparison plot
ggplot(filter(metrics, metric == 'r2' & building != "CoServ" & building != "SMUD"), aes(factor(model, levels = c('rf', 'svr', 'lr')))) +
geom_bar(aes(y = value, fill = model),
color = "black", width = 0.9, position = 'dodge', stat = 'identity') +
facet_wrap(~building) + xlab('Model') +
ylab("r squared") + theme_dark(14) +
theme(axis.text.x = element_text(size = 14, face = 'bold', color = 'black'),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 12, face = 'bold', color = 'black'),
panel.background = element_rect(fill = 'white')) +
ggtitle("Model Test Set R Squared Comparison") +
scale_fill_manual(values = c("blue", "red", "green"))
ggplot(filter(metrics, metric == 'mape' & building != "CoServ" & building != "SMUD"), aes(factor(model, levels = c('rf', 'svr', 'lr')))) +
geom_bar(aes(y = 100 * value, fill = model),
color = "black", width = 0.9, position = 'dodge', stat = 'identity') +
facet_wrap(~building) + xlab('Model') +
ylab("Percentage") + theme_dark(14) +
theme(axis.text.x = element_text(size = 14, face = 'bold', color = 'black'),
panel.grid.minor = element_blank(),
axis.text.y = element_text(size = 12, face = 'bold', color = 'black'),
panel.background = element_rect(fill = 'white')) +
ggtitle("Model Test Set MAPE Comparison") + scale_y_continuous(breaks = seq(0,60, 10)) +
scale_fill_manual(values = c("blue", "red", "green"))
knitr::opts_chunk$set(echo = FALSE)
options(formatR.indent = 4, width = 80)
knitr::opts_chunk$set(tidy = TRUE)
# Set correct working directory depending on desktop in use
#
# For personal laptop use
knitr::opts_knit$set(root.dir = 'C:/Users/Will Koehrsen/Documents/DSCI 451/17f-dsci351-451-wjk68/1-assignments/SemProj-451/building_energy_eda')
# For VUV VDI (citrix) use
# knitr::opts_knit$set(root.dir =
# 'H:/Git/17f-dsci351-451-wjk68/1-assignments/SemProj-451/building_energy_eda')
# Load in relevant libraries and set theme for ggplot
suppressMessages(library(tidyverse))
suppressMessages(library(lubridate))
suppressMessages(library(ggplot2)); theme_set(theme_light(16))
suppressMessages(library(data.table))
metadata <- fread('metadata/progressive_metadata.csv')
metadata_sub <- metadata[,c(2, 3, 4, 5, 7, 9)]
knitr::kable(metadata_sub, caption = 'Progressive Building Metadata')
ggplot(runtimes, aes(x = building, y = time, fill = task)) +
geom_bar(stat = 'identity', position = 'stack')
ggplot(runtimes, aes(x = building, y = time, fill = task)) +
geom_bar(stat = 'identity', position = 'fill') +
scale_fill_manual(values = c('blue', 'red')) + xlab('') + ylab('Time (sec)') +
ggtitle('Random Forest Runtimes')
ggplot(runtimes, aes(x = building, y = time, fill = task)) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_manual(values = c('blue', 'red')) + xlab('') + ylab('Time (sec)') +
ggtitle('Random Forest Runtimes')
ggplot(runtimes, aes(x = building, y = time, fill = factor(task, levels = c('train', 'predict')))) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_manual(values = c('blue', 'red')) + xlab('') + ylab('Time (sec)') +
ggtitle('Random Forest Runtimes')
ggplot(runtimes, aes(x = building, y = time, fill = factor(task, levels = c('train', 'predict')))) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_manual(values = c('blue', 'red')) + xlab('') + ylab('Time (sec)') +
ggtitle('Random Forest Runtimes') + labs(fill = 'task') +
theme(axis.text = element_text(color = 'black')) + theme_classic(14)
ggplot(runtimes, aes(x = building, y = time, fill = factor(task, levels = c('train', 'predict')))) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_manual(values = c('blue', 'red')) + xlab('') + ylab('Time (sec)') +
ggtitle('Random Forest Runtimes') + labs(fill = 'task') +
theme_classic(14) + theme(axis.text = element_text(color = 'black'))
ggplot(runtimes, aes(x = building, y = time, fill = factor(task, levels = c('train', 'predict')))) +
geom_bar(stat = 'identity', position = 'dodge') +
scale_fill_manual(values = c('blue', 'red')) + xlab('') + ylab('Time (sec)') +
ggtitle('Random Forest Runtimes') + labs(fill = 'task') +
theme_classic(14) + theme(axis.text = element_text(color = 'black')) +
scale_y_continuous(breaks = seq(0, 160, 20))
head(metrics)
rf_metrics <- dplyr::filter(metrics, model =='rf') %>%
group_by(metric) %>% summarize(avg = mean(value))
knitr::kable(rf_metrics, 'RF Metrics on Random Split')
knitr::kable(rf_metrics, caption = 'RF Metrics on Random Split')
View(metrics)
aps_trainlabels <- read_feather('../feather/train_test/APS_y_train')
aps_testlabels <- read_feather('../feather/train_test/APS_y_test')
aps_trainlabels <- read_feather('../feather/train_test/APS_y_train.feather')
aps_labels <- rbind(aps_trainlabels, aps_testlabels) %>% arrange(timestamp)
aps_trainlabels <- read_feather('../feather/train_test/APS_y_train.feather')
aps_testlabels <- read_feather('../feather/train_test/APS_y_test.feather')
aps_labels <- rbind(aps_trainlabels, aps_testlabels) %>% arrange(timestamp)
aps_predictions <- read_feather('../feather/predictions/APS_predictions.feather')
aps_predictions$timestamp <- aps_testlabels$timestamp
aps_comparison <- merge(aps_labels, aps_predictions, by = c('timestamp'), all.x = TRUE)
View(aps_comparison)
+ geom_point(aes(y = rf), color = 'red', size = 1.1) + xlab('') + ylab('Energy (kWh)')+
ggtitle('RF SRP Random Split Predictions') + theme_classic(14)
ggplot(aps_comparison, aes(as.Date(timestamp), forecast)) + geom_line()
+ geom_point(aes(y = rf), color = 'red', size = 1.1) + xlab('') + ylab('Energy (kWh)')+
ggtitle('RF SRP Random Split Predictions') + theme_classic(14)
ggplot(aps_comparison, aes(as.Date(timestamp), forecast)) + geom_line()  +
geom_point(aes(y = rf), color = 'red', size = 1.1) + xlab('') + ylab('Energy (kWh)')+
ggtitle('RF SRP Random Split Predictions') + theme_classic(14)
ggplot(aps_comparison, aes(as.Date(timestamp), forecast)) + geom_point(alpha = 0.05)  +
geom_point(aes(y = rf), color = 'red', size = 1.1, alpha = 0.1) + xlab('') + ylab('Energy (kWh)')+
ggtitle('RF SRP Random Split Predictions') + theme_classic(14)
ggplot(aps_comparison, aes(as.Date(timestamp), forecast)) + geom_point(alpha = 0.1)  +
geom_point(aes(y = rf), color = 'red', size = 1.1, alpha = 0.1) + xlab('') + ylab('Energy (kWh)')+
ggtitle('RF SRP Random Split Predictions') + theme_classic(14)
six_months_index <- nrow(df) - (96 * 6 * 30)
df2 <- df %>% mutate(day = yday(timestamp), month = month(timestamp),
year = year(timestamp)) %>%
# Transform cyclical features (month, day, num_time)
mutate(day_sin = sin(2 * day * pi / 365),
day_cos = cos(2 * day * pi / 365),
month_sin = sin(2 * month * pi / 12),
month_cos = cos(2 * month * pi / 12),
num_time_sin = sin(2 * num_time * pi / 24),
num_time_cos = cos(2 * num_time * pi / 24))
df2$day_of_week <- as.numeric(unclass(df2$day_of_week))
df2 <- dummy.data.frame(df2, names = c('week_day_end', 'sun_rise_set'), sep = '_')
initial_labels <- df2[1:six_months_index, c('timestamp', 'cleaned_energy', 'forecast')]
initial_df <- df2[1:six_months_index, ]
last_six_df <- df2[six_months_index:nrow(df2), ]
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df2 <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
last_six_df <- df2[six_months_index:nrow(df2), ]
which(names(last_six_df) %in% weather_vars)
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df2 <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
cols_to_remove <- c('elec_cons', 'elec_cons_imp', 'pow_dem', 'cleaned_energy',
'anom_flag', 'forecast', 'anom_missed_flag',
'sun_rise_set_NA')
cols_to_remove <- c('elec_cons', 'elec_cons_imp', 'pow_dem', 'cleaned_energy',
'anom_flag', 'forecast', 'anom_missed_flag',
'sun_rise_set_NA')
df2$timestamp <- as.numeric(df2$timestamp)
df2 <- df2[, -which(names(df2) %in% cols_to_remove)]
initial_df <- df2[1:six_months_index, ]
last_six_df <- df2[six_months_index:nrow(df2), ]
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df2 <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
last_six_df <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
features_labels <- get_months_set(df)
get_months_set <- function(df) {
six_months_index <- nrow(df) - (96 * 6 * 30)
# Create columns for day of the year, month, and year
df2 <- df %>% mutate(day = yday(timestamp), month = month(timestamp),
year = year(timestamp)) %>%
# Transform cyclical features (month, day, num_time)
mutate(day_sin = sin(2 * day * pi / 365),
day_cos = cos(2 * day * pi / 365),
month_sin = sin(2 * month * pi / 12),
month_cos = cos(2 * month * pi / 12),
num_time_sin = sin(2 * num_time * pi / 24),
num_time_cos = cos(2 * num_time * pi / 24))
# Convert day of week to a numeric value
df2$day_of_week <- as.numeric(unclass(df2$day_of_week))
# One hot encoding of categorical variables
df2 <- dummy.data.frame(df2, names = c('week_day_end', 'sun_rise_set'), sep = '_')
# Extract the known values, and timestamps for graphing for the two sets of data
initial_labels <- df2[1:six_months_index, c('timestamp', 'cleaned_energy', 'forecast')]
last_six_labels <- df2[six_months_index:nrow(df2), c('timestamp', 'cleaned_energy', 'forecast')]
# Columns that are not needed
cols_to_remove <- c('elec_cons', 'elec_cons_imp', 'pow_dem', 'cleaned_energy',
'anom_flag', 'forecast', 'anom_missed_flag',
'sun_rise_set_NA')
# Change the timestamp to a numeric
df2$timestamp <- as.numeric(df2$timestamp)
# Remove the columns from the features
df2 <- df2[, -which(names(df2) %in% cols_to_remove)]
# Scale all the features to have 0 mean and 1 sd
df2 <- as.data.frame(scale(df2))
# Split the labels into initial values and last six months
initial_df <- df2[1:six_months_index, ]
last_six_df <- df2[six_months_index:nrow(df2), ]
# Remove the weather variables from the last six dataframe
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
# Merge the dataframes to get the weather from the corresponding day last year
last_six_df <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
# Return the complete features and labels as testing and training sets
return(list('X_train' = initial_df, 'X_test' = last_six_df,
'y_train' = initial_labels, 'y_test' = last_six_labels))
}
features_labels <- get_months_set(df)
features_labels <- get_months_set(df)
X_train_initial <- features_labels$X_train
X_test_six <- features_labels$X_test
y_train_initial <- features_labels$y_train
y_train_initial <- features_labels$y_train
y_test_six <- features_labels$y_test
# Save training and testing dataframes to feathers for use in Python
for (file in filenames) {
# Create the training/testing features/labels
df <- read_data(file)
name <- unlist(strsplit(file, '-|_'))[2]
features_labels <- get_months_set(df)
X_train <- features_labels$X_train
X_test <- features_labels$X_test
y_train <- features_labels$y_train
y_test <- features_labels$y_test
# Save the data
feather::write_feather(X_train, sprintf('../feather/month/%s_X_train.feather', name))
feather::write_feather(X_test, sprintf('../feather/months/%s_X_test.feather', name))
feather::write_feather(y_train, sprintf('../feather/months/%s_y_train.feather', name))
feather::write_feather(y_test, sprintf('../feather/months/%s_y_test.feather', name))
}
# Save training and testing dataframes to feathers for use in Python
for (file in filenames) {
# Create the training/testing features/labels
df <- read_data(file)
name <- unlist(strsplit(file, '-|_'))[2]
features_labels <- get_months_set(df)
X_train <- features_labels$X_train
X_test <- features_labels$X_test
y_train <- features_labels$y_train
y_test <- features_labels$y_test
# Save the data
feather::write_feather(X_train, sprintf('../feather/months/%s_X_train.feather', name))
feather::write_feather(X_test, sprintf('../feather/months/%s_X_test.feather', name))
feather::write_feather(y_train, sprintf('../feather/months/%s_y_train.feather', name))
feather::write_feather(y_test, sprintf('../feather/months/%s_y_test.feather', name))
}
name <- unlist(strsplit(file, '-|_'))[2]
feather_dir <- '../feather/predictions/'
months_metrics <- as.data.frame(matrix(ncol = 3))
names(months_metrics) <- c('building', 'metric', 'value')
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
true_values <- read_feather(sprintf('../feather/months/%s_y_test.feather',
name))$cleaned_energy
print(nrow(true_values)/96)
print(length(true_values)/96)
predictions <- read_feather(paste0(feather_dir, name, '_month_predictions.feather'))
print(nrow(predictions/96))
print(nrow(predictions)/96)
predictions$true <- true_values
length(true_values)
nrow(predictions)
length(true_values) - nrow(predictions)
true_values[96]
predictions[1]
summary(true_values[1])
summary(true_values[,1])
summary(true_values[])
summary(true_values)
summary(predictions[, 1])
name <- 'APS'
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
true_values <- read_feather(sprintf('../feather/months/%s_y_test.feather',
name))$cleaned_energy
predictions <- read_feather(paste0(feather_dir, name, '_month_predictions.feather'))
predictions$true <- true_values
36290 / 96
name <- 'CoServ'
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
true_values <- read_feather(sprintf('../feather/months/%s_y_test.feather',
name))$cleaned_energy
predictions <- read_feather(paste0(feather_dir, name, '_month_predictions.feather'))
View(predictions)
X_test <- read_feather('../feather/months/APS_X_test.feather')
y_test <- read_feather('../feather/months/APS_y_test.feather')
df <- read_data('f-APS_weather.csv')
six_months_index <- nrow(df) - (96 * 6 * 30)
df2 <- df %>% mutate(day = yday(timestamp), month = month(timestamp),
year = year(timestamp)) %>%
# Transform cyclical features (month, day, num_time)
mutate(day_sin = sin(2 * day * pi / 365),
day_cos = cos(2 * day * pi / 365),
month_sin = sin(2 * month * pi / 12),
month_cos = cos(2 * month * pi / 12),
num_time_sin = sin(2 * num_time * pi / 24),
num_time_cos = cos(2 * num_time * pi / 24))
df2$day_of_week <- as.numeric(unclass(df2$day_of_week))
df2 <- dummy.data.frame(df2, names = c('week_day_end', 'sun_rise_set'), sep = '_')
initial_labels <- df2[1:six_months_index, c('timestamp', 'cleaned_energy', 'forecast')]
last_six_labels <- df2[six_months_index:nrow(df2), c('timestamp', 'cleaned_energy', 'forecast')]
cols_to_remove <- c('elec_cons', 'elec_cons_imp', 'pow_dem', 'cleaned_energy',
'anom_flag', 'forecast', 'anom_missed_flag',
'sun_rise_set_NA')
df2$timestamp <- as.numeric(df2$timestamp)
df2 <- df2[, -which(names(df2) %in% cols_to_remove)]
df2 <- as.data.frame(scale(df2))
initial_df <- df2[1:six_months_index, ]
last_six_df <- df2[six_months_index:nrow(df2), ]
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')), all.y = TRUE)
nrow(initial_df) == nrow(initial_labels)
nrow(last_six_df) == nrow(last_six_labels)
initial_df <- df2[1:six_months_index, ]
last_six_df <- df2[six_months_index:nrow(df2), ]
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
last_six_df <- df2[six_months_index:nrow(df2), ]
last_six_df <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
View(last_six_df)
last_six_df <- df2[six_months_index:nrow(df2), ]
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
last_six_df <- merge(last_six_df, initial_df[, c('day', 'num_time', weather_vars)],
by = (c('day', 'num_time')))
View(last_six_df)
last_six_df <- df2[six_months_index:nrow(df2), ]
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
time_range <- range(last_six_df$timestamp)
weather_df <- filter(initial_df, timestamp >= time_range[1] & timestamp <= time_range[2]) %>%
select(c('day', 'num_time', weather_vars))
weather_df <- filter(df2, timestamp >= time_range[1] & timestamp <= time_range[2]) %>%
select(c('day', 'num_time', weather_vars))
last_six_df <- bind_cols(last_six_df, weather_df, by = c('day', 'num_time'))
last_six_df <- bind_cols(last_six_df, weather_df)
which(names(last_six_df) %in% c('day1', 'num_time1'))
last_six_df <- last_six_df[, -which(names(last_six_df) %in% c('day1', 'num_time1'))]
get_months_set <- function(df) {
six_months_index <- nrow(df) - (96 * 6 * 30)
# Create columns for day of the year, month, and year
df2 <- df %>% mutate(day = yday(timestamp), month = month(timestamp),
year = year(timestamp)) %>%
# Transform cyclical features (month, day, num_time)
mutate(day_sin = sin(2 * day * pi / 365),
day_cos = cos(2 * day * pi / 365),
month_sin = sin(2 * month * pi / 12),
month_cos = cos(2 * month * pi / 12),
num_time_sin = sin(2 * num_time * pi / 24),
num_time_cos = cos(2 * num_time * pi / 24))
# Convert day of week to a numeric value
df2$day_of_week <- as.numeric(unclass(df2$day_of_week))
# One hot encoding of categorical variables
df2 <- dummy.data.frame(df2, names = c('week_day_end', 'sun_rise_set'), sep = '_')
# Extract the known values, and timestamps for graphing for the two sets of data
initial_labels <- df2[1:six_months_index, c('timestamp', 'cleaned_energy', 'forecast')]
last_six_labels <- df2[six_months_index:nrow(df2), c('timestamp', 'cleaned_energy', 'forecast')]
# Columns that are not needed
cols_to_remove <- c('elec_cons', 'elec_cons_imp', 'pow_dem', 'cleaned_energy',
'anom_flag', 'forecast', 'anom_missed_flag',
'sun_rise_set_NA')
# Change the timestamp to a numeric
df2$timestamp <- as.numeric(df2$timestamp)
# Remove the columns from the features
df2 <- df2[, -which(names(df2) %in% cols_to_remove)]
# Scale all the features to have 0 mean and 1 sd
df2 <- as.data.frame(scale(df2))
# Split the labels into initial values and last six months
initial_df <- df2[1:six_months_index, ]
last_six_df <- df2[six_months_index:nrow(df2), ]
# Remove the weather variables from the last six dataframe
weather_vars <- c('ghi', 'dif', 'gti', 'temp', 'rh', 'pwat', 'ws')
last_six_df <- last_six_df[, -which(names(last_six_df) %in% weather_vars)]
time_range <- range(last_six_df$timestamp)
weather_df <- filter(df2, timestamp >= time_range[1] & timestamp <= time_range[2]) %>%
select(c('day', 'num_time', weather_vars))
# Merge the dataframes to get the weather from the corresponding day last year
last_six_df <- bind_cols(last_six_df, weather_df)
last_six_df <- last_six_df[, -which(names(last_six_df) %in% c('day1', 'num_time1'))]
# Return the complete features and labels as testing and training sets
return(list('X_train' = initial_df, 'X_test' = last_six_df,
'y_train' = initial_labels, 'y_test' = last_six_labels))
}
# Example
features_labels <- get_months_set(df)
X_train_initial <- features_labels$X_train
X_test_six <- features_labels$X_test
y_train_initial <- features_labels$y_train
y_test_six <- features_labels$y_test
# Save training and testing dataframes to feathers for use in Python
for (file in filenames) {
# Create the training/testing features/labels
df <- read_data(file)
name <- unlist(strsplit(file, '-|_'))[2]
features_labels <- get_months_set(df)
X_train <- features_labels$X_train
X_test <- features_labels$X_test
y_train <- features_labels$y_train
y_test <- features_labels$y_test
# Save the data
feather::write_feather(X_train, sprintf('../feather/months/%s_X_train.feather', name))
feather::write_feather(X_test, sprintf('../feather/months/%s_X_test.feather', name))
feather::write_feather(y_train, sprintf('../feather/months/%s_y_train.feather', name))
feather::write_feather(y_test, sprintf('../feather/months/%s_y_test.feather', name))
}
feather_dir <- '../feather/predictions/'
feather_dir <- '../feather/predictions/'
months_metrics <- as.data.frame(matrix(ncol = 3))
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
true_values <- read_feather(sprintf('../feather/months/%s_y_test.feather',
name))$cleaned_energy
predictions <- read_feather(paste0(feather_dir, name, '_month_predictions.feather'))
predictions$true <- true_values
rf_rmse <- Metrics::rmse(predictions$true, predictions$rf)
rf_r2 <- cor(predictions$true, predictions$rf) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$rf)
rf_rmse <- Metrics::rmse(predictions$true, predictions$predictions)
rf_r2 <- cor(predictions$true, predictions$predictions) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$predictions)
all_metrics <- c(rf_rmse, rf_r2, rf_mape)
results$building <- name
results$value <- all_metrics
metrics <- rbind(metrics, results)
# Read results back in from Python
feather_dir <- '../feather/predictions/'
months_metrics <- as.data.frame(matrix(ncol = 3))
names(months_metrics) <- c('building', 'metric', 'value')
# Iterate through all the predictions for all the buildings
for (file in filenames) {
name <- unlist(strsplit(file, '-|_'))[2]
# Dataframe to hold results for each building one at a time
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
# Compare the true values and the predictions
true_values <- read_feather(sprintf('../feather/months/%s_y_test.feather',
name))$cleaned_energy
print(length(true_values)/96)
predictions <- read_feather(paste0(feather_dir, name, '_month_predictions.feather'))
print(nrow(predictions)/96)
predictions$true <- true_values
# Performance metrics
rf_rmse <- Metrics::rmse(predictions$true, predictions$predictions)
rf_r2 <- cor(predictions$true, predictions$predictions) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$predictions)
all_metrics <- c(rf_rmse, rf_r2, rf_mape)
# Add results to building dataframe
results$building <- name
results$metric <- c('rmse', 'r2', 'mape')
results$value <- all_metrics
# Store all results in a single dataframe
months_metrics <- rbind(months_metrics, results)
}
# Remove the first row
metrics <- metrics[-1, ]
View(predictions)
View(months_metrics)
ggplot(predictions, (true, predictions)) + geom_jitter()
ggplot(predictions, aes(true, predictions)) + geom_jitter()
true_values <- read_feather(sprintf('../feather/months/%s_y_test.feather',
name))
ggplot(true_values, aes(timestamp, cleaned_energy))
ggplot(true_values, aes(timestamp, cleaned_energy)) + geom_line()
ggplot(predictions, aes(true_values$timestamp, predictions)) + geom_line()
ggplot(df, (timestamp, cleaned_energy)) + geom_line()
ggplot(df, aes(timestamp, cleaned_energy)) + geom_line()
ggplot(df[(nrow(df)-96*6*30):nrow(df), ], aes(timestamp, cleaned_energy)) + geom_line()
