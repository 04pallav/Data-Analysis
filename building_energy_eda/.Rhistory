months_metrics <- months_metrics[complete.cases(months_metrics), ]
months_metrics <- merge(months_metrics, metrics[, c('building', 'location')],
by = 'building', all.x = TRUE)
# Read results back in from Python
feather_dir <- '../feather/challenge_results/'
months_metrics <- as.data.frame(matrix(ncol = 3))
names(months_metrics) <- c('building', 'metric', 'value')
# Iterate through all the predictions for all the buildings
for (file in filenames) {
name <- unlist(strsplit(file, '-|_'))[2]
# Dataframe to hold results for each building one at a time
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
# Compare the true values and the predictions
true_values <- read_feather(sprintf('../feather/challenge_predictions/%s_y_test.feather',
name))$cleaned_energy
# Read in the predictions and add the true values to the dataframe
predictions <- read_feather(paste0(feather_dir, name, '_preds.feather'))
predictions$true <- true_values
rf_rmse <- Metrics::rmse(predictions$true, predictions$predictions)
rf_r2 <- cor(predictions$true, predictions$predictions) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$predictions)
all_metrics <- c(rf_rmse, rf_r2, rf_mape)
# Add results to building dataframe
results$building <- name
results$metric <- c('rmse', 'r2', 'mape')
results$value <- all_metrics
# Store all results in a single dataframe
months_metrics <- rbind(months_metrics, results)
}
# Dataframe of results for the final 4 months
months_metrics <- months_metrics[complete.cases(months_metrics), ]
months_metrics <- merge(months_metrics, metrics[, c('building', 'location')],
by = 'building')
months_metrics <- as.data.frame(matrix(ncol = 3))
names(months_metrics) <- c('building', 'metric', 'value')
for (file in filenames) {
name <- unlist(strsplit(file, '-|_'))[2]
# Dataframe to hold results for each building one at a time
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
# Compare the true values and the predictions
true_values <- read_feather(sprintf('../feather/challenge_predictions/%s_y_test.feather',
name))$cleaned_energy
# Read in the predictions and add the true values to the dataframe
predictions <- read_feather(paste0(feather_dir, name, '_preds.feather'))
predictions$true <- true_values
rf_rmse <- Metrics::rmse(predictions$true, predictions$predictions)
rf_r2 <- cor(predictions$true, predictions$predictions) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$predictions)
all_metrics <- c(rf_rmse, rf_r2, rf_mape)
# Add results to building dataframe
results$building <- name
results$metric <- c('rmse', 'r2', 'mape')
results$value <- all_metrics
# Store all results in a single dataframe
months_metrics <- rbind(months_metrics, results)
}
months_metrics <- months_metrics[complete.cases(months_metrics), ]
months_metrics <- merge(months_metrics, metrics[, c('building', 'location')],
by = 'building')
feather_dir <- '../feather/challenge_results/'
months_metrics <- as.data.frame(matrix(ncol = 3))
names(months_metrics) <- c('building', 'metric', 'value')
for (file in filenames) {
name <- unlist(strsplit(file, '-|_'))[2]
# Dataframe to hold results for each building one at a time
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
# Compare the true values and the predictions
true_values <- read_feather(sprintf('../feather/challenge_predictions/%s_y_test.feather',
name))$cleaned_energy
# Read in the predictions and add the true values to the dataframe
predictions <- read_feather(paste0(feather_dir, name, '_preds.feather'))
predictions$true <- true_values
rf_rmse <- Metrics::rmse(predictions$true, predictions$predictions)
rf_r2 <- cor(predictions$true, predictions$predictions) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$predictions)
all_metrics <- c(rf_rmse, rf_r2, rf_mape)
# Add results to building dataframe
results$building <- name
results$metric <- c('rmse', 'r2', 'mape')
results$value <- all_metrics
# Store all results in a single dataframe
months_metrics <- rbind(months_metrics, results)
}
months_metrics <- months_metrics[complete.cases(months_metrics), ]
months_metrics <- merge(months_metrics, metadata[, c('Name', 'location')],
by.x = 'building', by.y = 'Name', all.x = TRUE)
# Convert MAPE to a percentage
months_metrics[which(months_metrics$metric == 'mape'), 'value'] <-
months_metrics[which(months_metrics$metric == 'mape'), 'value'] * 100
knitr::kable(months_metrics, caption = 'RF Prediction Metrics')
# Metric Plots for the final Six Months
ggplot(filter(months_metrics, building != "CoServ" & building != "SMUD"),
aes(x = location, y = value)) +
geom_bar(stat = 'identity', fill = 'firebrick', color = 'black') +
ylab("") + xlab('Building') +
facet_grid(metric ~ ., scales = 'free_y') +
ggtitle("Random Forest Prediction Performance") + theme_hc(12) +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
ggplot(filter(months_metrics, building != "CoServ" & building != "SMUD"),
aes(x = location, y = value)) +
geom_bar(stat = 'identity', fill = 'lightcyan4', color = 'black') +
ylab("") + xlab('Building') +
facet_grid(metric ~ ., scales = 'free_y') +
ggtitle("Random Forest Prediction Performance") + theme_hc(12) +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
ggplot(filter(months_metrics, building != "CoServ" & building != "SMUD"),
aes(x = location, y = value)) +
geom_bar(stat = 'identity', fill = 'ivory4', color = 'black') +
ylab("") + xlab('Building') +
facet_grid(metric ~ ., scales = 'free_y') +
ggtitle("Random Forest Prediction Performance") + theme_hc(12) +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
knitr::kable(months_metrics, caption = 'RF Prediction Metrics')
ggplot(filter(months_metrics, building != "CoServ" & building != "SMUD"),
aes(x = location, y = value)) +
geom_bar(stat = 'identity', fill = 'ivory4', color = 'black') +
ylab("") + xlab('Building') +
facet_grid(metric ~ ., scales = 'free_y') +
ggtitle("Random Forest Prediction Performance") + theme_hc(12) +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
ggplot(filter(months_metrics, building != "CoServ" & building != "SMUD"),
aes(x = location, y = value)) +
geom_bar(stat = 'identity', fill = 'gray20', color = 'black') +
ylab("") + xlab('Building') +
facet_grid(metric ~ ., scales = 'free_y') +
ggtitle("Random Forest Prediction Performance") + theme_hc(12) +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
knitr::include_graphics('prediction_metrics.png')
prediction_summary <- group_by(months_metrics, metric) %>%
summarize(metric = mean(metric, na.rm = TRUE))
prediction_summary <- group_by(months_metrics, metric) %>%
summarize(value = mean(value, na.rm = TRUE))
months_metrics[which(months_metrics$value == Inf), ]$value <- NA
prediction_summary <- group_by(months_metrics, metric) %>%
summarize(value = mean(value, na.rm = TRUE))
View(months_metrics)
features_import <- read_feather('../feather/feature_importances/feature_importances.feather')
library(tidyverse)
library(feather)
features_import <- read_feather('../feather/feature_importances/feature_importances.feather')
features <- names(read_feather('../feather/train_test/APS_X_test.feather'))
features_import$feature <- features
features_import <- reshape2::melt(features_import, id.vars = c('feature'))
names(features_import) <- c('feature', 'building', 'importance')
features_import <- merge(features_import, metadata[, c('Name', 'location')],
by.x = 'building', by.y = 'Name', all.x = TRUE)
ggplot(features_import, aes(feature, importance, col = location)) +
geom_point() + xlab('feature') + ylab('RF Importance') +
ggtitle('Random Forest Feature Importances') + theme_classic() +
theme(axis.text.x = element_text(angle = 90, vjust = 0))
ggplot(features_import, aes(feature, importance, col = location)) +
geom_point(size = 1.5) + xlab('feature') + ylab('RF Importance') +
ggtitle('Random Forest Feature Importances') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
theme_hc(12) + scale_color_tableau() +
theme(plot.title = element_text(hjust = 0.5))
library(ggthemes)
ggplot(features_import, aes(feature, importance, col = location)) +
geom_point(size = 1.5) + xlab('feature') + ylab('RF Importance') +
ggtitle('Random Forest Feature Importances') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
theme_hc(12) + scale_color_tableau() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(features_import, aes(feature, importance, col = location)) +
geom_point(size = 3) + xlab('feature') + ylab('RF Importance') +
ggtitle('Random Forest Feature Importances') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
theme_hc(12) + scale_color_tableau() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(features_import, aes(feature, importance, col = location)) +
geom_point(size = 3) + xlab('feature') + ylab('RF Importance') +
ggtitle('Random Forest Feature Importances') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
theme_hc(12) + scale_color_tableau() +
theme(plot.title = element_text(hjust = 0.5),
legend.postion = 'right')
ggplot(features_import, aes(feature, importance, col = location)) +
geom_point(size = 3) + xlab('feature') + ylab('RF Importance') +
ggtitle('Random Forest Feature Importances') +
theme(axis.text.x = element_text(angle = 90, vjust = 0)) +
theme_hc(12) + scale_color_tableau() +
theme(plot.title = element_text(hjust = 0.5),
legend.position = 'right')
# Show the average importance of features across all buildings
average_import <- features_import %>% group_by(feature) %>%
summarize(average = mean(importance)) %>%
arrange(desc(average))
# Plot as a horizontal barchart
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'green', color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('RF Importance') +
ggtitle('Average RF Feature Importance') +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text.y = element_text(face = 'bold', color = 'black'),
axis.title = element_text(color = 'black', size = 14)) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'darkgreen', color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_stata(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text = element_text(color = 'black')) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'darkgreen', color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_stata(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text = element_text(color = 'black'),
axis.text.y = element_text(angle = 90)) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'darkgreen', color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_stata(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text.x = element_text(color = 'black'),
axis.text.y = element_text(angle = 90)) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'darkgreen', color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_hc(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text.x = element_text(color = 'black'),
axis.text.y = element_text(angle = 90)) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'darkgreen', color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_hc(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text.x = element_text(color = 'black'),
axis.text.y = element_text()) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'darkgreen', withd = 0.9,
color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_hc(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text = element_text(color = 'black')) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
ggplot(average_import, aes(reorder(feature, average), average)) +
geom_bar(stat = 'identity', fill = 'firebrick', withd = 0.9,
color = 'black', lwd = 1) +
coord_flip() + xlab('') + ylab('Importance') +
ggtitle('Average RF Feature Importance') + theme_hc(12) +
scale_y_continuous(lim = c(0, 0.3), breaks = seq(0, 0.3, 0.05)) +
theme(axis.text = element_text(color = 'black')) +
geom_text(aes(y = average + 0.015, label = round(average, 3)))
# All importances for each building
knitr::include_graphics('all_importances.png')
# Importances averaged over all buildings
knitr::include_graphics('average_importances.png')
# Create a vector to hold results
diff_df <- as.data.frame(matrix(ncol = 4))
names(diff_df) <- c('building', 'before', 'after', 'diff_pct')
yearpoints <- 96 * 365
# Iterate through the file and find the differences
for (file in filenames) {
name <- unlist(strsplit(file, '-|_'))[2]
# Find the total consumption before, total consumption after, and change
predictions <- read_feather(sprintf('../feather/predictions/%s_increased_predictions.feather', name))
true <- read_feather(sprintf('../feather/increased/%s_labels.feather', name))
if (length(predictions) >= yearpoints) {
last_index <- length(predictions) - yearpoints
annual_before <- sum(true$forecast[last_index:nrow(true)])
annual_after <- sum(predictions[last_index:length(predictions)])
} else {
annual_before <- sum(true$forecast)
annual_after <- sum(predictions)
}
difference_pt <- (annual_after - annual_before) / annual_before * 100
# Add the row to a dataframe for record keeping
diff_df <- add_row(diff_df, building = name, before = annual_before,
after = annual_after, diff_pct = difference_pt)
}
# Only complete rows retained
diff_df <- diff_df[complete.cases(diff_df), ]
# Record increase for coloring
diff_df$increase <- ifelse(diff_df$diff_pct > 0, 'red', 'green')
# Plot the results
ggplot(diff_df, aes(x = building, y = diff_pct, fill = increase)) +
geom_bar(stat = 'identity', color = 'black') +
xlab('Building') + ylab('% Difference') +
ggtitle('Effect of 2 C Increase in Temp') +
scale_y_continuous(lim = c(-2, 5), breaks = seq(-2, 5, 1)) + theme_economist(12) +
scale_fill_identity() + theme(legend.position = 'none')
diff_df <- merge(diff_df, metadata[, c('Name', 'location')],
by.x = 'building', by.y = 'Name', all.x = TRUE)
ggplot(diff_df, aes(x = building, y = diff_pct, fill = increase)) +
geom_bar(stat = 'identity', color = 'black') +
xlab('Building') + ylab('% Difference') +
ggtitle('Effect of 2 C Increase in Temp') +
scale_y_continuous(lim = c(-2, 5), breaks = seq(-2, 5, 1)) + theme_economist(12) +
scale_fill_identity() + theme(legend.position = 'none')
ggplot(diff_df, aes(location, cost, fill = increase)) +
geom_bar(stat = 'identity') +
scale_fill_identity() + xlab('') + ylab('Cost $') +
ggtitle('Annual Cost of 2 C Increase in Temp') + theme_economist_white(12) +
scale_y_continuous(breaks = seq(0, 30000, 5000), limits = c(-500, 35000)) +
geom_text(label = round(diff_df$cost), vjust = -1) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5))
# Calculate and graph costs (or savings) of temp increase
kwh_cost <- 0.104
diff_df <- diff_df %>% mutate(cost = (after - before) * kwh_cost)
# PLot the costs (using economist theme of course)
ggplot(diff_df, aes(location, cost, fill = increase)) +
geom_bar(stat = 'identity') +
scale_fill_identity() + xlab('') + ylab('Cost $') +
ggtitle('Annual Cost of 2 C Increase in Temp') + theme_economist_white(12) +
scale_y_continuous(breaks = seq(0, 30000, 5000), limits = c(-500, 35000)) +
geom_text(label = round(diff_df$cost), vjust = -1) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5))
ggplot(diff_df, aes(location, cost, fill = increase)) +
geom_bar(stat = 'identity') +
scale_fill_identity() + xlab('') + ylab('Cost $') +
ggtitle('Annual Cost of 2 C Increase in Temp') + theme_economist(12) +
scale_y_continuous(breaks = seq(0, 30000, 5000), limits = c(-500, 35000)) +
geom_text(label = round(diff_df$cost), vjust = -1) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5))
ggplot(diff_df, aes(location, cost, fill = increase)) +
geom_bar(stat = 'identity') +
scale_fill_identity() + xlab('') + ylab('Cost $') +
ggtitle('Annual Cost of 2 C Increase in Temp') + theme_economist(12) +
scale_y_continuous(breaks = seq(0, 30000, 5000), limits = c(-500, 35000)) +
geom_text(label = round(diff_df$cost), vjust = -1) +
theme(axis.text.x = element_text(angle = 60, vjust = 0.5),
plot.title = element_text(hjust = 0.5))
knitr::include_graphics('economics.png')
# Read results back in from Python
feather_dir <- '../feather/challenge_results/'
months_metrics <- as.data.frame(matrix(ncol = 3))
names(months_metrics) <- c('building', 'metric', 'value')
# Iterate through all the predictions for all the buildings
for (file in filenames) {
name <- unlist(strsplit(file, '-|_'))[2]
# Dataframe to hold results for each building one at a time
results <- as.data.frame(matrix(nrow = 3, ncol = 3))
names(results) <- c('building', 'metric', 'value')
# Compare the true values and the predictions
true_values <- read_feather(sprintf('../feather/challenge_predictions/%s_y_test.feather',
name))$cleaned_energy
# Read in the predictions and add the true values to the dataframe
predictions <- read_feather(paste0(feather_dir, name, '_preds.feather'))
predictions$true <- true_values
rf_rmse <- Metrics::rmse(predictions$true, predictions$predictions)
rf_r2 <- cor(predictions$true, predictions$predictions) ^ 2
rf_mape <- Metrics::mape(predictions$true, predictions$predictions)
all_metrics <- c(rf_rmse, rf_r2, rf_mape)
# Add results to building dataframe
results$building <- name
results$metric <- c('rmse', 'r2', 'mape')
results$value <- all_metrics
# Store all results in a single dataframe
months_metrics <- rbind(months_metrics, results)
}
# Dataframe of results for the final 4 months
months_metrics <- months_metrics[complete.cases(months_metrics), ]
months_metrics <- merge(months_metrics, metadata[, c('Name', 'location')],
by.x = 'building', by.y = 'Name', all.x = TRUE)
# Convert MAPE to a percentage
months_metrics[which(months_metrics$metric == 'mape'), 'value'] <-
months_metrics[which(months_metrics$metric == 'mape'), 'value'] * 100
knitr::kable(months_metrics, caption = 'RF Prediction Metrics')
# Metric Plots for the final Six Months
ggplot(filter(months_metrics, building != "CoServ" & building != "SMUD"),
aes(x = location, y = value)) +
geom_bar(stat = 'identity', fill = 'gray20', color = 'black') +
ylab("") + xlab('Building') +
facet_grid(metric ~ ., scales = 'free_y') +
ggtitle("Random Forest Prediction Performance") + theme_hc(12) +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
months_metrics[which(months_metrics$value == Inf), ]$value <- NA
prediction_summary <- group_by(months_metrics, metric) %>%
summarize(value = mean(value, na.rm = TRUE))
# Find length of all datasets in years
lenyrs <- c()
names <- c()
train_lens <- c()
# Iterate through all the files
for (file in filenames) {
# Create the training/testing features/labels
df <- read_data(file)
name <- unlist(strsplit(file, '-|_'))[2]
leny <- nrow(df) / (60 / (as.numeric(df$timestamp[5] - df$timestamp[4])) * 24 * 365)
train_len <- nrow(df) - (60 / (as.numeric(df$timestamp[5] - df$timestamp[4])) * 24 * 180)
lenyrs <- c(lenyrs, leny)
names <- c(names, name)
train_lens <- c(train_lens, train_len)
}
# Dataframe with lengths and r2 values
df_lens <- data.frame('building' = names, 'years' = lenyrs, 'points' = train_lens)
df_lens <- merge(df_lens, dplyr::filter(months_metrics, metric == 'r2'), by = 'building')
# Plot r2 versus years of data with linear fit, indicate uncertainty
ggplot(df_lens, aes(x = years, y = value)) + geom_point(size = 2, color = 'firebrick') +
xlab('Years of data') + ylab('R2') + ggtitle('R2 vs Years of Data') +
theme_classic(12) + th + scale_y_continuous(breaks = seq(0.4, 1.0, 0.1)) +
geom_smooth(se = TRUE, method = 'lm') + geom_text(aes(y = value + 0.05, label = building))
# Plot r2 versus number of datapoints with linear fit, indicate uncertainty
ggplot(df_lens, aes(x = points, y = value)) + geom_point(size = 2, color = 'firebrick') +
xlab('Number of Training Datapoints') + ylab('R2') + ggtitle('R2 vs Training Points') +
theme_classic(12) + th + scale_y_continuous(breaks = seq(0.4, 1.0, 0.1)) +
geom_smooth(se = TRUE, method = 'lm') + geom_text(aes(y = value + 0.05, label = building))
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = TRUE)
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
library(lubridate)
library(data.table)
library(ggthemes)
library(ggmap)
library(feather)
library(tidyverse)
library(maps)
library(kableExtra)
# Color schemes
# stata for climate zones
# tableau('tableau10') for sample set
# tableau('greenorange12') for building type
# Read in relevant true values and predictions
aps_train <- feather::read_feather('../data/feather/APS_y_train.feather')
aps_test  <- feather::read_feather('../data/feather/APS_y_test.feather')
aps_true <- rbind(aps_train, aps_test)
aps_true <- aps_true[, - which(names(aps_true) == 'cleaned_energy')]
names(aps_true)[2] <- 'value'
aps_true$set <- 'actual'
aps_pred <- feather::read_feather('../data/feather/APS_preds.feather')
names(aps_pred) <- 'value'
aps_pred$timestamp <- aps_test$timestamp
aps_pred$set <- 'pred'
aps_true <- rbind(aps_true, aps_pred)
# Overall true and predicted values
ggplot(aps_true, aes(x = timestamp, y = value, col = set)) + geom_line() + theme_classic(12)  +
xlab('') + ylab('Energy (kWh)') + ggtitle('Example RF Predictions') +
scale_color_manual(values = c('grey25', 'firebrick'))
# Weekly
aps_true$week <- lubridate::week(aps_true$timestamp)
aps_week <- aps_true[which(aps_true$week == 42), ]
aps_week$day <- lubridate::wday(label = TRUE, abbr = TRUE, aps_week$timestamp)
aps_week <- aps_week[which(lubridate::year(aps_week$timestamp) == 2016), ]
aps_week$time <- lubridate::hms(stringr::str_split_fixed(aps_week$timestamp, pattern = ' ', n = 2)[, 2])
ggplot(aps_week, aes(x = round(as.numeric(time)/3600), y = value, col = set)) + geom_line() +
facet_grid(. ~ day) + xlab('Time od Day (hrs)') + ylab('Energy (kWh)') +
ggtitle('Weekly Random Forest Predictions') + scale_x_continuous(breaks = seq(0, 24, 6)) +
theme_classic()
ggplot(aps_week, aes(x = round(as.numeric(time)/3600), y = value, col = set)) + geom_line() +
facet_grid(. ~ day) + xlab('Time od Day (hrs)') + ylab('Energy (kWh)') +
ggtitle('Weekly Random Forest Predictions') + scale_x_continuous(breaks = seq(0, 24, 6)) +
theme_hc(12) + theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5))
ggplot(aps_week,
aes(x = round(as.numeric(time)/3600), y = value, col = set)) +
geom_line(size = 1.1) +
facet_grid(. ~ day) + xlab('Time of Day (hrs)') + ylab('Energy (kWh)') +
ggtitle('Weekly Random Forest Predictions') +
scale_x_continuous(breaks = seq(0, 24, 6)) +
theme_hc(12) + theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5)) +
scale_color_stata()
ggplot(aps_week,
aes(x = round(as.numeric(time)/3600), y = value, col = set)) +
geom_line(size = 1.1) +
facet_grid(. ~ day) + xlab('Time of Day (hrs)') + ylab('Energy (kWh)') +
ggtitle('Weekly Random Forest Predictions') +
scale_x_continuous(breaks = seq(0, 24, 6)) + labs(color = '') +
theme_hc(12) + theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5)) +
scale_color_stata()
ggplot(aps_true, aes(x = timestamp, y = value, col = set)) + geom_line() + theme_hc(12)  +
xlab('') + ylab('Energy (kWh)') + ggtitle('Example RF Predictions') +
scale_color_stata() + labs(color = '')
ggplot(aps_true, aes(x = timestamp, y = value, col = set)) +
geom_line() + theme_tufte(12)  +
xlab('') + ylab('Energy (kWh)') + ggtitle('Example RF Predictions') +
scale_color_stata() + labs(color = '')
ggplot(aps_true, aes(x = timestamp, y = value, col = set)) +
geom_line() + theme_tufte(12)  +
xlab('') + ylab('Energy (kWh)') + ggtitle('Example RF Predictions') +
scale_color_stata() + labs(color = '') +
theme(axis.text = element_text(color = 'black'),
plot.title = element_text(hjust = 0.5),
legend.position = 'bottom')
View(kansas)
# Full Predictions for six months
knitr::include_graphics('predictions_full.png')
# Predictions for a week
knitr::include_graphics('predictions_week.png')
save(all_temp_slopes, file = 'all_temp_slopes')
load(all_temp_slopes)
load('all_temp_slopes')
load('all_temp_slopes')
load(all_temp_slopes)
save(all_temp_slopes, file = 'all_temp_slopes')
load(all_temp_slopes)
load('all_temp_slopes')
save(all_temp_slopes, file = 'all_temp_slopes')
load('all_temp_slopes')
knitr::kable(all_temp_slopes[1:8, ], caption = 'Summer and Winter Temp Linear Model Stats')
save(weather_r2, file = 'weather_r2')
load('weather_r2')
